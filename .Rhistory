install devtools
utils:::menuInstallPkgs()
library(kernsmooth)
Library (KernSmooth)
search()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(foreign)
library(devtools)
find -rtools()
find_rtools()
find_rtools()
q()
add2<-function(x,y){
x + y
}
add2(3,5)
above <- function(x, n ){
use <-x>n
x[use]
}
x<-1:20
above (x,12)
above <- function(x, n = 10 ){
use <-x>n
x[use]
}
above (x)
columnmean <-function(y){
nc <-ncol(y)
means <-numeric(nc)
for(i in 1:nc){
means [i] <-mean(y[,i])
}
means
}
columnmean(airquality)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
library(datasets)
data(iris)
?iris
apply(iris[,1],2,mean)
apply(iris,1, mean)
colmeans(iris)
colMeans(iris)
rowMeans(iris[,1:4])
colMeans(iris[1,])
colMeans(iris[1])
library(datasets)
data(mtcars)
View(iris)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcrs$hp,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
setwd("C:/Users/Hu/assignment2/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector()
a$set(c(1,2,3,4,5,6,7))
a$get
cachemean(a)
cachemean(a)
a <- makeVector()
a$set(c(1,2,3,4,5,6,7, 8, 9, 10))
cachemean(a)
cachemean(a)
matrix
matrix(c(1, 0 , 0, 0, 1, 0), nrow =2, ncol =3)
a <-matrix(c(1, 0 , 0, 0, 1, 0), nrow =2, ncol =3)
solve(a)
a <-matrix(c(1, 0 , 0, 0, 1, 0, 0 , 0, 1), nrow =3, ncol =3)
a
solve(a)
a <-matrix(c(1, 0 , 0, 0, 1, 0, 0 , 0, 0), nrow =3, ncol =3)
solve(a)
a <-matrix(c(1, 0 , 0, 0, 1, 0, 0 , 0, 2), nrow =3, ncol =3)
solve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse )
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix()
a$set(c(1,2,3,4,5,6,7,8,9))
a
a$get
cacheSolve(a)
a$set(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
a$set(matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
)
a$get
cacheSolve(a)
